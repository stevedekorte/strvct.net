{
  "version": 3,
  "sources": ["JsonValidator.js"],
  "sourcesContent": ["/**\n * JsonValidator - A class to validate JSON against JSON Schema\n * using jsonschema\n * \n * Example usage:\n * \n * const validator = new JsonValidator();\n * validator.setJsonSchema(schema);\n * const isValid = validator.validate(json);\n * if (!isValid) {\n *   console.error(validator.errorMessageForLLM());\n * } else {\n *   console.log(\"JSON is valid\");\n * }\n * \n */\n\nif (SvGlobals.globals().jsonschema === undefined) {\n  throw new Error(\"jsonschema is not defined\");\n}\n\nclass JsonValidator {\n  /**\n   * Constructor - creates a new JsonValidator instance\n   * @param {Object} [options] - jsonschema options\n   */\n  constructor(options = {}) {\n    // Check if jsonschema is properly loaded\n    if (!SvGlobals.globals().jsonschema || !SvGlobals.globals().jsonschema.Validator) {\n      throw new Error(\"jsonschema library not properly loaded. Validator class not found.\");\n    }\n    \n    // Default options\n    const defaultOptions = {\n      throwError: false,        // Don't throw on validation errors\n      allowUnknownAttributes: false, // Don't allow unknown attributes\n      skipAttributes: [],       // No attributes to skip\n      nestedErrors: true,       // Enable nested error reporting\n      required: true,           // Enable required field validation\n      type: true,              // Enable type checking\n      format: true,            // Enable format validation\n      coerceTypes: false       // Disable type coercion\n    };\n    \n    // Merge default options with provided options\n    this._options = { ...defaultOptions, ...options };\n    \n    // Internal properties\n    this._jsonSchema = null;\n    const Validator = SvGlobals.globals().jsonschema.Validator;\n    this._validator = new Validator();\n    if (!this._validator) { // do not remove this check!\n      throw new Error(\"Failed to create validator instance\"); \n    }\n    this._error = null;\n  }\n\n  /**\n   * Set JSON Schema and compile validation function\n   * @param {Object} schema - JSON Schema object\n   * @returns {JsonValidator} - Returns this for method chaining\n   */\n  setJsonSchema(schema) {\n    if (!schema || typeof schema !== 'object') {\n      throw new Error('Schema must be a valid object');\n    }\n    \n    this._jsonSchema = schema;\n    try {\n      // jsonschema doesn't need compilation, just store the schema\n      this._error = null;\n    } catch (err) {\n      this._error = {\n        isSchemaError: true,\n        isCompilationError: true,\n        message: `Schema compilation error: ${err.message}`,\n        originalError: err\n      };\n    }\n    \n    return this;\n  }\n\n  /**\n   * Get current JSON Schema\n   * @returns {Object|null} - The current JSON Schema or null if not set\n   */\n  jsonSchema() {\n    return this._jsonSchema;\n  }\n\n  /**\n   * Validate JSON data against the schema\n   * @param {Object|string} json - JSON data as object or string\n   * @returns {boolean} - True if valid, false if invalid\n   */\n  validate(json) {\n    if (!this._jsonSchema) {\n      throw new Error('No schema set. Call setJsonSchema() first.');\n    }\n    \n    this._error = null;\n    \n    // Parse JSON if it's a string\n    let data = json;\n    if (typeof json === 'string') {\n      try {\n        data = JSON.parse(json);\n      } catch (err) {\n        this._error = {\n          isJsonParseError: true,\n          message: `Invalid JSON: ${err.message}`,\n          originalError: err\n        };\n        return false;\n      }\n    }\n    \n    // Explicit type checking\n    if (this._jsonSchema.properties) {\n      for (const [key, propSchema] of Object.entries(this._jsonSchema.properties)) {\n        if (propSchema.type && data[key] !== undefined) {\n          const expectedType = propSchema.type;\n          const actualType = typeof data[key];\n          \n          // Special case for integers\n          if (expectedType === 'integer' && Number.isInteger(data[key])) {\n            continue;\n          }\n          \n          // Special case for numbers\n          if (expectedType === 'number' && typeof data[key] === 'number') {\n            continue;\n          }\n          \n          // For strings, ensure it's actually a string\n          if (expectedType === 'string' && typeof data[key] !== 'string') {\n            this._error = {\n              isSchemaError: true,\n              message: `Property \"${key}\" must be of type ${expectedType}, got ${actualType}`\n            };\n            return false;\n          }\n        }\n      }\n    }\n    \n    // Validate against schema\n    console.log('Validating data:', data);\n    console.log('Against schema:', this._jsonSchema);\n    console.log('With options:', this._options);\n    const result = this._validator.validate(data, this._jsonSchema, this._options);\n    console.log('Validation result:', result);\n    if (result.errors && result.errors.length > 0) {\n      console.log('Validation errors:', result.errors);\n    }\n    \n    if (!result.valid) {\n      this._error = {\n        isSchemaError: true,\n        errors: result.errors,\n        message: this._formatErrors(result.errors)\n      };\n    }\n    \n    return result.valid;\n  }\n\n  /**\n   * Check if the last validation had errors\n   * @returns {boolean} - True if there were errors, false otherwise\n   */\n  hasError() {\n    return this._error !== null;\n  }\n\n  /**\n   * Get error details from the last validation\n   * @returns {Object|null} - Error object or null if no errors\n   */\n  error() {\n    return this._error;\n  }\n\n  /**\n   * Get error message formatted for LLM consumption\n   * @returns {string} - Formatted error message\n   */\n  errorMessageForLLM() {\n    if (!this._error) {\n      return \"No validation errors\";\n    }\n\n    if (this._error.isJsonParseError) {\n      return `JSON Parse Error: ${this._error.message}`;\n    }\n\n    if (this._error.isSchemaError) {\n      return `Schema Validation Error: ${this._error.message}`;\n    }\n    \n    // Generic error\n    return `Error: ${this._error.message || 'An unknown validation error occurred.'}`;\n  }\n\n  /**\n   * Format errors from jsonschema into a more readable format\n   * @private\n   */\n  _formatErrors(errors) {\n    if (!errors || errors.length === 0) {\n      return \"Unknown validation error\";\n    }\n    \n    return errors.map(err => {\n      const path = err.property || '(root)';\n      return `${path}: ${err.message || 'Validation failed'}`;\n    }).join('; ');\n  }\n\n  /**\n   * Static test method to demonstrate JsonValidator functionality\n   * @returns {boolean} - True if all tests pass\n   */\n  static test() {\n    console.log('Running JsonValidator tests...');\n    \n    // Check if jsonschema is available\n    if (!SvGlobals.globals().jsonschema) {\n      console.error('jsonschema is not available in global scope');\n      return false;\n    }\n    \n    if (!SvGlobals.globals().jsonschema.Validator) {\n      console.error('jsonschema.Validator is not available');\n      return false;\n    }\n    \n    // Test schema with explicit type definitions\n    const schema = {\n      type: \"object\",\n      properties: {\n        name: {\n          type: \"string\",\n          required: true\n        }\n      },\n      additionalProperties: false,\n      required: [\"name\"]\n    };\n    \n    console.log('Test schema:', schema);\n    \n    // Test cases\n    const testCases = [\n      {\n        name: 'Valid JSON',\n        json: { name: 'John' },\n        expected: true\n      },\n      {\n        name: 'Invalid JSON - wrong type',\n        json: { name: 123 },\n        expected: false\n      }\n    ];\n    \n    try {\n      const validator = new JsonValidator();\n      validator.setJsonSchema(schema);\n      \n      let allTestsPassed = true;\n      \n      for (const testCase of testCases) {\n        const result = validator.validate(testCase.json);\n        const passed = result === testCase.expected;\n        \n        console.log(`Test \"${testCase.name}\": ${passed ? 'PASSED' : 'FAILED'}`);\n        if (!passed) {\n          console.log(`Expected: ${testCase.expected}, Got: ${result}`);\n          if (validator.hasError()) {\n            console.log(`Error: ${validator.errorMessageForLLM()}`);\n          }\n        }\n        \n        allTestsPassed = allTestsPassed && passed;\n      }\n      \n      console.log(`All tests ${allTestsPassed ? 'PASSED' : 'FAILED'}`);\n      return allTestsPassed;\n    } catch (error) {\n      console.error('Error during validation:', error);\n      return false;\n    }\n  }\n}\n\nSvGlobals.globals().JsonValidator = JsonValidator;\n\n/*\n// Run tests always\nif (!JsonValidator.test()) {\n  throw new Error(\"JsonValidator tests failed\");\n}\n*/\n"],
  "mappings": "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",
  "names": []
}
