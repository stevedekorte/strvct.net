{
  "version": 3,
  "sources": ["JsonRepairShop.js"],
  "sourcesContent": ["// First, install the json-repair package: npm install json-repair\n\n/**\n * A utility class to extract properties from invalid JSON using the json-repair library\n */\nclass JsonRepairShop {\n  /**\n   * Constructor\n   * @param {string} jsonString - Optional initial JSON string\n   */\n  constructor(jsonString = null) {\n    this._jsonString = jsonString;\n  }\n\n  /**\n   * Set the JSON string to work with\n   * @param {string} jsonString - The JSON string to process\n   */\n  setJsonString(jsonString) {\n    this._jsonString = jsonString;\n  }\n\n  /**\n   * Extract a property from the JSON string\n   * @param {string} propertyName - The name of the property to extract\n   * @returns {any} The value of the property if found, or undefined otherwise\n   */\n  extractProperty(propertyName) {\n    if (!this._jsonString) {\n      return undefined;\n    }\n\n    // Try multiple methods to extract the property\n    let propertyValue;\n    \n    // Method 1: Use the robust property extractor\n    propertyValue = this._robustPropertyExtractor(propertyName);\n    if (propertyValue !== undefined) return propertyValue;\n    \n    // Method 2: Try the top level extractor\n    const allProps = this.extractTopLevelProperties();\n    propertyValue = allProps[propertyName];\n    if (propertyValue !== undefined) return propertyValue;\n    \n    // Method 3: Try manual repair\n    propertyValue = this._extractPropertyWithManualRepair(propertyName);\n    if (propertyValue !== undefined) return propertyValue;\n    \n    // Method 4: Try regex as a last resort\n    propertyValue = this._extractPropertyWithRegex(propertyName);\n    if (propertyValue !== undefined) return propertyValue;\n    \n    // Method 5: Try json-repair library as final attempt\n    propertyValue = this._extractPropertyWithRepair(propertyName);\n    \n    return propertyValue;\n  }\n\n  /**\n   * Extract a property using regex\n   * @private\n   * @param {string} propertyName - The name of the property to extract\n   * @returns {any} The value of the property, or undefined if not found\n   */\n  _extractPropertyWithRegex(propertyName) {\n    // This regex looks for \"propertyName\": followed by a string or number value\n    const propertyRegex = new RegExp(`\"${propertyName}\"\\\\s*:\\\\s*(?:\"([^\"]*)\"|(\\\\d+))`, 'i');\n    const match = this._jsonString.match(propertyRegex);\n    \n    if (match) {\n      // Return either the string value (match[1]) or the numeric value (match[2])\n      return match[1] || match[2] || undefined;\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Extract a property using a robust regex approach\n   * @private\n   * @param {string} propertyName - The name of the property to extract\n   * @returns {any} The value of the property, or undefined if not found\n   */\n  _robustPropertyExtractor(propertyName) {\n    // This approach handles nested structures better\n    const propertyRegex = new RegExp(`\"${propertyName}\"\\\\s*:\\\\s*((\"[^\"]*\")|([\\\\d]+)|true|false|null)`, 'i');\n    const match = this._jsonString.match(propertyRegex);\n    \n    if (!match || !match[1]) return undefined;\n    \n    const rawValue = match[1].trim();\n    \n    // Parse the value according to its type\n    if (rawValue.startsWith('\"') && rawValue.endsWith('\"')) {\n      return rawValue.slice(1, -1); // String\n    } else if (rawValue === \"true\") {\n      return true;\n    } else if (rawValue === \"false\") {\n      return false;\n    } else if (rawValue === \"null\") {\n      return null;\n    } else if (!isNaN(Number(rawValue))) {\n      return Number(rawValue);\n    }\n    \n    return rawValue;\n  }\n\n  /**\n   * Extract all top-level properties\n   * @private\n   * @returns {object} An object containing all extracted properties\n   */\n  extractTopLevelProperties() {\n    const result = {};\n    \n    // Match all top-level property definitions\n    const propRegex = /\"([^\"]+)\"\\s*:\\s*(\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"|\\d+|true|false|null|\\{[^}]*\\}|\\[[^\\]]*\\])/g;\n    \n    let match;\n    while ((match = propRegex.exec(this._jsonString)) !== null) {\n      const key = match[1];\n      let value = match[2];\n      \n      // Try to determine the type and convert accordingly\n      if (value.startsWith('\"') && value.endsWith('\"')) {\n        value = value.slice(1, -1);\n      } else if (!isNaN(Number(value))) {\n        value = Number(value);\n      }\n      \n      result[key] = value;\n    }\n    \n    return result;\n  }\n\n  /**\n   * Extract a property using manual JSON repair\n   * @private\n   * @param {string} propertyName - The name of the property to extract\n   * @returns {any} The value of the property, or undefined if not found or on error\n   */\n  _extractPropertyWithManualRepair(propertyName) {\n    // Fix common JSON errors:\n    \n    // 1. Missing closing quotes for strings\n    let repaired = this._jsonString.replace(/:\\s*\"([^\"]*)(?=[,}\\]])/g, ': \"$1\"');\n    \n    // 2. Missing commas between properties\n    repaired = repaired.replace(/}(\\s*){/g, '},\\n$1{');\n    \n    // 3. Trailing commas\n    repaired = repaired.replace(/,(\\s*[}\\]])/g, '$1');\n    \n    try {\n      const parsed = JSON.parse(repaired);\n      // Extract the requested property\n      return propertyName in parsed ? parsed[propertyName] : undefined;\n    } catch (e) {\n      console.log(\"Repair attempt failed:\", e.message);\n      return undefined;\n    }\n  }\n\n  /**\n   * Extract a property using the json-repair library\n   * @private\n   * @param {string} propertyName - The name of the property to extract\n   * @returns {any} The value of the property, or undefined if not found or on error\n   */\n  _extractPropertyWithRepair(propertyName) {\n    try {\n      // Try to repair the JSON\n      const repairedJson = jsonRepair(this._jsonString);\n      // Parse the repaired JSON\n      const parsedJson = JSON.parse(repairedJson);\n      // Return the requested property if it exists\n      return propertyName in parsedJson ? parsedJson[propertyName] : undefined;\n    } catch (error) {\n      console.error('Failed to repair JSON:', error);\n      return undefined;\n    }\n  }\n}\n\nSvGlobals.globals().JsonRepairShop = JsonRepairShop;"],
  "mappings": "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",
  "names": []
}
