/**
 * @module library.services.ImaginePro.Text_to_Image.images
 */

/**
 * @class ImagineProImage
 * @extends SvImage
 * @classdesc Represents an individual image generated by ImaginePro.
 */
"use strict";

(class ImagineProImage extends SvImage {

  /**
   * @description Initializes the prototype slots for the class.
   * @category Initialization
   */
  initPrototypeSlots () {

    /**
     * @member {string} url
     * @description The URL of the generated image.
     * @category Data
     */
    {
      const slot = this.newSlot("url", "");
      slot.setShouldStoreSlot(true);
      slot.setSyncsToView(true);
      slot.setSlotType("String");
      slot.setIsSubnodeField(true);
    }

    /**
     * @member {string} imageUrl
     * @description The proxied image URL.
     * @category Data
     */
    {
      const slot = this.newSlot("imageUrl", "");
      slot.setShouldStoreSlot(true);
      slot.setSyncsToView(true);
      slot.setSlotType("String");
    }

    /**
     * @member {string} status
     * @description The loading status of the image.
     * @category Status
     */
    {
      const slot = this.newSlot("status", "");
      slot.setShouldStoreSlot(false);
      slot.setSyncsToView(true);
      slot.setSlotType("String");
      slot.setIsSubnodeField(true);
    }

    /**
     * @member {Object} delegate
     * @description The delegate for handling events.
     * @category Delegation
     */
    {
      const slot = this.newSlot("delegate", null);
      slot.setSlotType("Object");
    }

    /**
     * @member {boolean} hasLoaded
     * @description Whether the image has been loaded.
     * @category Status
     */
    {
      const slot = this.newSlot("hasLoaded", false);
      slot.setShouldStoreSlot(true);
      slot.setSlotType("Boolean");
    }

    this.setShouldStore(true);
    this.setShouldStoreSubnodes(false);
    this.setCanDelete(true);
  }

  /**
   * @description Gets the subtitle for the image.
   * @returns {string} The subtitle.
   * @category Metadata
   */
  subtitle () {
    return this.status();
  }

  /**
   * @description Fetches the image data.
   * @category Process
   */
  async fetch () {
    if (this.hasLoaded()) {
      return;
    }

    this.setStatus("loading...");

    try {
      // Use proxy server to fetch the image
      const proxyServer = ProxyServers.shared().defaultServer();
      const proxiedUrl = proxyServer.proxyUrlForUrl(this.url());
      
      this.setImageUrl(proxiedUrl);

      // Create an img element to load the image
      const img = new Image();
      img.crossOrigin = "anonymous";
      
      await new Promise((resolve, reject) => {
        img.onload = () => {
          // Convert to data URL for storage
          const canvas = document.createElement('canvas');
          canvas.width = img.width;
          canvas.height = img.height;
          const ctx = canvas.getContext('2d');
          ctx.drawImage(img, 0, 0);
          const dataUrl = canvas.toDataURL('image/png');
          
          this.setDataUrl(dataUrl);
          this.setHasLoaded(true);
          this.setStatus("loaded");
          
          this.sendDelegate("onImageLoaded", [this]);
          resolve();
        };
        
        img.onerror = (error) => {
          this.setStatus("error loading image");
          this.sendDelegate("onImageError", [this]);
          reject(error);
        };
        
        img.src = proxiedUrl;
      });
      
    } catch (error) {
      console.error("Error fetching image:", error);
      this.setStatus("error: " + error.message);
      this.sendDelegate("onImageError", [this]);
    }
  }

  /**
   * @description Sends a delegate method call.
   * @param {string} methodName - The name of the method to call.
   * @param {Array} args - The arguments to pass to the method.
   * @returns {boolean} True if the delegate method was called, false otherwise.
   * @category Delegation
   */
  sendDelegate (methodName, args = [this]) {
    const d = this.delegate();
    if (d) {
      const f = d[methodName];
      if (f) {
        f.apply(d, args);
        return true;
      }
    }
    return false;
  }

  /**
   * @description Shuts down the image.
   * @returns {ImagineProImage} The current instance.
   * @category Lifecycle
   */
  shutdown () {
    // Cleanup if needed
    return this;
  }

}.initThisClass());